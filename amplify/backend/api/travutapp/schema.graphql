schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}

type TestType {
	ID: String!
	SORTKEY: String!
	attr1: String
}

interface User {
	# typename : String!

	ID : String!
	SORTKEY : String!
	locationID : String
	location: Location
	email : AWSEmail
	status : String
	firstName : String
	lastName : String
	nickName : String
	gender : String
	birthday : String
	phone : AWSPhone
	languages : [String]
	photoURL : AWSURL
	regIP : AWSIPAddress
	regDate : String
	updateIP : AWSIPAddress
	updateDate : String
	deactivateIP : AWSIPAddress
	deactivateDate : String
}

type Traveler implements User {
	# typename : String!

	ID: String!
	SORTKEY: String!
	locationID: String
	location: Location
	email: AWSEmail
	status: String
	firstName: String
	lastName: String
	nickName: String
	gender: String
	birthday: String
	phone: AWSPhone
	languages: [String]
	photoURL: AWSURL
	regIP: AWSIPAddress
	regDate: String
	updateIP: AWSIPAddress
	updateDate: String
	deactivateIP: AWSIPAddress
	deactivateDate: String
}

type Provider implements User {
	# typename : String!
	
	ID : String!
	SORTKEY : String!
	locationID : String
	location: Location
	email : AWSEmail
	status : String
	firstName : String
	lastName : String
	nickName : String
	gender : String
	birthday : String
	phone : AWSPhone
	languages : [String]
	photoURL : AWSURL
	regIP : AWSIPAddress
	regDate : String
	updateIP : AWSIPAddress
	updateDate : String
	deactivateIP : AWSIPAddress
	deactivateDate : String

	experience : Int
	reviews : Int
	rating : Int

	locationIDs : String
	type : String
	companyID : String
	companyStatus : String
	campanyInfo :AWSJSON
	certInfo :AWSJSON
	welcomeMSG : String
	serviceList : String
}


type TripRequest {
	ID : String!
	SORTKEY : String!
	locationID : String
	location: Location
	status: String
	travelerIDs: [String]
	tripReqInfo : AWSJSON
	recipientsCnt : Int
	checkedIDs : [String]
	participantsIDs : [String]
	refusersIDs : [String]
	expTime : String
	regIP : AWSIPAddress
	regDate : String
	updateIP : AWSIPAddress
	updateDate : String	
}

type TripOffer {
	ID: String!
	SORTKEY: String!
	locationID: String
	locationInfo: Location
	status: String
	title: String
	chatID: String
	tripOfferInfo: AWSJSON
	contractInfo: AWSJSON
	paymentInfo: AWSJSON
	tripReqID: String
	tripRequest: TripRequest
	expTime: AWSDateTime
	regIP: AWSIPAddress
	regDate: String
	updateIP: AWSIPAddress
	updateDate: AWSDateTime
}

type ServiceOffer {
	ID: String!
	SORTKEY: String!
	bookingInfo: String
	serviceOfferInfo: AWSJSON
	comments: [AWSJSON]
	info: AWSJSON!
	locationID: String!
	svcCategoryID: String!
	tripOfferID: String!
	type: String
	expTime: AWSDateTime
	regDate: AWSDateTime!
	regIP: AWSIPAddress!
	updateDate: AWSDateTime
	updateIP: AWSIPAddress
}

type Location {
	ID : String!
	SORTKEY : String!
	region : String
	locationName : String
	mapInfo : AWSJSON
	locationInfo : AWSJSON
	order : AWSJSON
	badgeUrl : String
	providerCount : Int
}

type Chat {
	ID : String!
	SORTKEY : String!
	name : String
	
	usersID : String
	# users : [User]
	# providerID : String
	# provider : [Provider]
	# travelersID : [String]
	# travelers : [Traveler]
	
	regIP : AWSIPAddress
	regDate : String
	updateIP : AWSIPAddress
	updateDate : String
}

type Message {
	ID : String!
	SORTKEY : String!
	userID : String
	# user : User
	type : String
	message: String
	regIP : AWSIPAddress
	regDate : String
	updateIP : AWSIPAddress
	updateDate : String
}

type Comment {
	ID : String!
	SORTKEY : String!
	userID : String
	contents : String
	likeUserIDs : [String]
	dislikeUserIDs : [String]
	regIP : AWSIPAddress
	regDate : String
	updateIP : AWSIPAddress
	updateDate : String
}

input CreateTestTypeInput {
	ID: String!
	attr1: String
}

input CreateTravelerInput {
	ID: String!
	SORTKEY: String!
	# locationID: String
	# email: AWSEmail
	# status: String
	firstName: String
	lastName: String
	nickName: String
	# gender: String
	# birthday: String
	# phone: AWSPhone
	# languages: [String]
	photoURL: AWSURL
	regIP: AWSIPAddress
}

input CreateTripRequestInput {
	ID : String!
	locationID : String
	status: String
	travelerIDs: [String]
	tripReqInfo : AWSJSON
	recipientsCnt : Int
	checkedIDs : [String]
	participantsIDs : [String]
	refusersIDs : [String]
	expTime : String
	regIP : AWSIPAddress
}

input CreateTripOfferInput {
	ID: String!
	locationID: String
	status: String
	title: String
	chatID: String
	tripOfferInfo: AWSJSON
	contractInfo: AWSJSON
	paymentInfo: AWSJSON
	tripReqID: String
	expTime: AWSDateTime
	regIP: AWSIPAddress
	regDate: AWSDateTime
	updateIP: AWSIPAddress
	updateDate: AWSDateTime	
}

input CreateServiceOfferInput {
	ID: String!
	SORTKEY: String!
	bookingInfo: String
	serviceOfferInfo: AWSJSON
	comments: [AWSJSON]
	info: AWSJSON!
	locationID: String!
	svcCategoryID: String!
	tripOfferID: String!
	type: String
	expTime: AWSDateTime
	regDate: AWSDateTime!
	regIP: AWSIPAddress!
}

input CreateLocationInput {
	ID : String!
	SORTKEY : String!
	region : String
	locationName : String
	mapInfo : AWSJSON
	locationInfo : AWSJSON
	order : AWSJSON
	badgeUrl : String
}

input CreateChatInput {
	name : String
	usersID : String
	regIP : AWSIPAddress
}

input CreateMessageInput {
	ID : String!
	userID : String
	type : String
	message: String
	regIP : AWSIPAddress
}

input CreateCommentInput {
	ID : String!
	userID : String
	contents : String
	regIP : AWSIPAddress
}

input UpdateTestTypeInput {
	ID: String!
	SORTKEY: String!
	attr1: String
}

input UpdateTravelerInput {
	ID: String!
	SORTKEY: String!
	locationID: String
	email: AWSEmail
	status: String
	firstName: String
	lastName: String
	nickName: String
	gender: String
	birthday: String
	phone: AWSPhone
	languages: [String]
	photoURL: AWSURL
	updateIP: AWSIPAddress
	updateDate: String
	deactivateIP: AWSIPAddress
	deactivateDate: String
}

input UpdateTripRequestInput {
	ID : String!
	SORTKEY : String!
	locationID : String
	status: String
	travelerIDs: [String]
	tripReqInfo : AWSJSON
	recipientsCnt : Int
	checkedIDs : [String]
	participantsIDs : [String]
	refusersIDs : [String]
	expTime : String
	updateIP : AWSIPAddress
	updateDate : String
}

input UpdateTripOfferInput {
	ID: String!
	SORTKEY: String!
	# locationID: String
	status: String
	# title: String
	chatID: String
	# tripOfferInfo: AWSJSON
	# contractInfo: AWSJSON
	# paymentInfo: AWSJSON
	# tripReqID: String
	# expTime: AWSDateTime
	# updateIP: AWSIPAddress
	# updateDate: AWSDateTime
}

input UpdateServiceOfferInput {
	ID: String!
	SORTKEY: String!
	bookingInfo: String
	serviceOfferInfo: AWSJSON
	comments: [AWSJSON]
	info: AWSJSON!
	locationID: String!
	svcCategoryID: String!
	tripOfferID: String!
	type: String
	expTime: AWSDateTime
	regDate: AWSDateTime!
	regIP: AWSIPAddress!
	updateIP : AWSIPAddress
	updateDate : String
}

input UpdateLocationInput {
	ID : String!
	SORTKEY : String!
	region : String
	locationName : String
	mapInfo : AWSJSON
	locationInfo : AWSJSON
	order : AWSJSON
	badgeUrl: String
	providerCount: Int
}

input UpdateChatInput {
	ID : String!
	SORTKEY : String!
	name : String
	usersID : String
	updateIP : AWSIPAddress
	updateDate : String
}

input UpdateMessageInput {
	ID : String!
	SORTKEY : String!
	userID : String
	type : String
	message: String
	regIP : AWSIPAddress
	regDate : String
	updateIP : AWSIPAddress
	updateDate : String
}

input UpdateCommentInput {
	ID : String!
	SORTKEY : String!
	userID : String
	contents : String
	likeUserIDs : [String]
	dislikeUserIDs : [String]
	regIP : AWSIPAddress
	regDate : String
	updateIP : AWSIPAddress
	updateDate : String
}

input GetInput {
	ID: String!
	SORTKEY: String!
}

input DeleteTravelerInput {
	ID: String!
	SORTKEY: String!
}

input TableTestTypeFilterInput {
	ID: TableStringFilterInput
	SORTKEY: TableStringFilterInput
	attr1: TableStringFilterInput
}

input TableTravelerFilterInput {
	ID: TableStringFilterInput
	SORTKEY: TableStringFilterInput
	locationID: TableStringFilterInput
	email: TableStringFilterInput
	status: TableStringFilterInput
	firstName: TableStringFilterInput
	lastName: TableStringFilterInput
	nickName: TableStringFilterInput
	gender: TableStringFilterInput
	birthday: TableStringFilterInput
	phone: TableStringFilterInput
	languages: TableStringFilterInput
	photoURL: TableStringFilterInput
	regIP: TableStringFilterInput
	regDate: TableStringFilterInput
}

input TableTripRequestFilterInput {
	ID: TableStringFilterInput
	SORTKEY: TableStringFilterInput
	locationID : TableStringFilterInput
	status: TableStringFilterInput
	travelerIDs: TableStringFilterInput
	recipientsCnt : TableIntFilterInput
	checkedIDs : TableStringFilterInput
	participantsIDs : TableStringFilterInput
	refusersIDs : TableStringFilterInput
	expTime : TableStringFilterInput
	regIP : TableStringFilterInput
	regDate : TableStringFilterInput
	updateIP : TableStringFilterInput
	updateDate : TableStringFilterInput	
}

input TableTripOfferFilterInput {
	ID: TableStringFilterInput
	SORTKEY: TableStringFilterInput
	locationID: TableStringFilterInput
	status: TableStringFilterInput
	title: TableStringFilterInput
	chatID: TableStringFilterInput
	tripReqID: TableStringFilterInput
	expTime: TableStringFilterInput
	regIP: TableStringFilterInput
	regDate: TableStringFilterInput
	updateIP: TableStringFilterInput
	updateDate: TableStringFilterInput
}

input TableServiceOfferFilterInput {
	ID: TableStringFilterInput
	SORTKEY: TableStringFilterInput
	bookingInfo: TableStringFilterInput
	locationID: TableStringFilterInput
	svcCategoryID: TableStringFilterInput
	tripOfferID: TableStringFilterInput
	type: TableStringFilterInput
	expTime: TableStringFilterInput
	regDate: TableStringFilterInput
	regIP: AWSIPAddress!
	updateIP : TableStringFilterInput
	updateDate : TableStringFilterInput
}

input TableProviderFilterInput {
	ID : TableStringFilterInput	
    SORTKEY : TableStringFilterInput	
    locationID : TableStringFilterInput	
    email : TableStringFilterInput	
    status : TableStringFilterInput	
    firstName : TableStringFilterInput	
    lastName : TableStringFilterInput	
    nickName : TableStringFilterInput	
    gender : TableStringFilterInput	
    birthday : TableStringFilterInput	
    phone : TableStringFilterInput	
    languages : TableStringFilterInput	
    photoURL : TableStringFilterInput	
    regIP : TableStringFilterInput	
    regDate : TableStringFilterInput	
    updateIP : TableStringFilterInput	
    updateDate : TableStringFilterInput	
    deactivateIP : TableStringFilterInput	
    deactivateDate : TableStringFilterInput

	experience : TableIntFilterInput
	reviews : TableIntFilterInput
	rating : TableIntFilterInput
    
    type : TableStringFilterInput	
    companyID : TableStringFilterInput	
    companyStatus : TableStringFilterInput	
    welcomeMSG : TableStringFilterInput	
    serviceList : TableStringFilterInput	
}

input TableLocationFilterInput {
	ID: TableStringFilterInput
	SORTKEY: TableStringFilterInput
	region : TableStringFilterInput
	locationName : TableStringFilterInput
	badgeUrl : TableStringFilterInput
}

input TableChatFilterInput {
	ID : TableStringFilterInput
	SORTKEY : TableStringFilterInput
	name : TableStringFilterInput
	usersID : TableStringFilterInput
	regIP : TableStringFilterInput
	regDate : TableStringFilterInput
	updateIP : TableStringFilterInput
	updateDate : TableStringFilterInput
}

input TableMessageFilterInput {
	ID : TableStringFilterInput
	SORTKEY : TableStringFilterInput
	userID : TableStringFilterInput
	type : TableStringFilterInput
	message: TableStringFilterInput
	regIP : TableStringFilterInput
	regDate : TableStringFilterInput
	updateIP : TableStringFilterInput
	updateDate : TableStringFilterInput
}

input TableCommentFilterInput {
	ID : TableStringFilterInput
	SORTKEY : TableStringFilterInput
	userID : TableStringFilterInput
	contents : TableStringFilterInput
	likeUserIDs : TableStringFilterInput
	dislikeUserIDs : TableStringFilterInput
	regIP : TableStringFilterInput
	regDate : TableStringFilterInput
	updateIP : TableStringFilterInput
	updateDate : TableStringFilterInput
}

type TestTypeConnection {
	items: [TestType]
	nextToken: String
}

type TravelerConnection {
	items: [Traveler]
	nextToken: String
}

type TripRequestConnection {
	items: [TripRequest]
	nextToken: String
}

type TripOfferConnection {
	items: [TripOffer]
	nextToken: String
}

type ServiceOfferConnection {
	items: [ServiceOffer]
	nextToken: String
}

type LocationConnection {
	items: [Location]
	nextToken: String
}

type ProviderConnection {
	items: [Provider]
	nextToken: String
}

type ChatConnection {
	items: [Chat]
	nextToken: String
}

type MessageConnection {
	items: [Message]
	nextToken: String
}

type CommentConnection {
	items: [Comment]
	nextToken: String
}

type Mutation {
	createTestType(input: CreateTestTypeInput!): TestType
	updateTestType(input: UpdateTestTypeInput!): TestType

	createTraveler(input: CreateTravelerInput!): Traveler
	createTripRequest(input: CreateTripRequestInput!): TripRequest
	createTripOffer(input: CreateTripOfferInput!): TripOffer
	createServiceOffer(input: CreateServiceOfferInput!): ServiceOffer
	createLocation(input: CreateLocationInput!): Location
	createChat(input: CreateChatInput!): Chat
	createMessage(input: CreateMessageInput!): Message
	createComment(input: CreateCommentInput!): Comment
	updateTraveler(input: UpdateTravelerInput!): Traveler
	updateTripRequest(input: UpdateTripRequestInput!): TripRequest
	updateTripOffer(input: UpdateTripOfferInput!): TripOffer
	updateServiceOffer(input: UpdateServiceOfferInput!): ServiceOffer
	updateLocation(input: UpdateLocationInput!): Location
	updateChat(input: UpdateChatInput!): Chat
	updateMessage(input: UpdateMessageInput!): Message
	updateComment(input: UpdateCommentInput!) : Comment
	deleteTraveler(input: DeleteTravelerInput!): Traveler
}

type Query {
	getTestType(input: GetInput!): TestType
	listTestTypes(filter:TableTestTypeFilterInput, limit: Int, nextToken: String): TestTypeConnection

	getUser(input: GetInput!): User
	getTraveler(input: GetInput!): Traveler
	getProvider(input: GetInput!): Provider
	getTripRequest(input: GetInput!): TripRequest
	getTripOffer(input: GetInput!): TripOffer
	getServiceOffer(input: GetInput!): ServiceOffer
	getLocation(input: GetInput!): Location
	getChat(input: GetInput!): Chat
	getMessage(input: GetInput!): Message
	getComment(input: GetInput!): Comment

	getProviderByScan(filter: TableProviderFilterInput, limit: Int, nextToken: String, providerID: String!): ProviderConnection

	listTravelers(filter: TableTravelerFilterInput, limit: Int, nextToken: String): TravelerConnection
	listTripRequests(filter: TableTripRequestFilterInput, limit: Int, nextToken: String): TripRequestConnection
	listTripRequestsByTravelerID(filter: TableTripRequestFilterInput, limit: Int, nextToken: String, , travelerID: String!): TripRequestConnection
	listTripOffers(filter: TableTripOfferFilterInput, limit: Int, nextToken: String): TripOfferConnection
	listTripOffersByRequestID(filter: TableTripOfferFilterInput, limit: Int, nextToken: String, tripRequestID: String!): TripOfferConnection
	listServiceOffers(filter: TableServiceOfferFilterInput, limit: Int, nextToken: String): ServiceOfferConnection
	listServiceOffersByTripOfferID(filter: TableServiceOfferFilterInput, limit: Int, nextToken: String, tripOfferID: String!): ServiceOfferConnection
	listLocations(filter: TableLocationFilterInput, limit: Int, nextToken: String): LocationConnection
	listProviders(filter: TableProviderFilterInput, limit: Int, nextToken: String): ProviderConnection
	listProvidersByLocationID(filter: TableProviderFilterInput, limit: Int, nextToken: String, locationID: String!): ProviderConnection
	listChats(filter: TableChatFilterInput, limit: Int, nextToken: String): ChatConnection
	listMessages(filter: TableMessageFilterInput, limit: Int, nextToken: String): MessageConnection
	listMessagesByChatID(filter: TableMessageFilterInput, limit: Int, nextToken: String, chatID: String!): MessageConnection
	listComments(filter: TableCommentFilterInput, limit: Int, nextToken: String): CommentConnection
	listCommentsByParentID(filter: TableCommentFilterInput, limit: Int, nextToken: String, parentID: String!): CommentConnection
}

type Subscription {
	onCreateTraveler(
		ID: String,
		SORTKEY: String,
		locationID: String,
		email: AWSEmail,
		status: String
	): Traveler
		@aws_subscribe(mutations: ["createTraveler"])
	onUpdateTraveler(
		ID: String,
		SORTKEY: String,
		locationID: String,
		email: AWSEmail,
		status: String
	): Traveler
		@aws_subscribe(mutations: ["updateTraveler"])
	onDeleteTraveler(
		ID: String,
		SORTKEY: String,
		locationID: String,
		email: AWSEmail,
		status: String
	): Traveler
		@aws_subscribe(mutations: ["deleteTraveler"])
	onCreateTripOffer(
		ID: String,
		SORTKEY: String
	): TripOffer
		@aws_subscribe(mutations: ["createTripOffer"])
	onCreateMessage(
		ID: String,
		SORTKEY: String
	): Message
		@aws_subscribe(mutations: ["createMessage"])
	onCreateComment(
		ID: String,
		SORTKEY: String
	): Comment
		@aws_subscribe(mutations: ["createComment"])
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}
